/*
 * Schemamule, a library for automating database schema tasks
 * Copyright (C) 2006, Moses M. Hohman and Rhett Sutphin
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St., 5th Floor, Boston, MA  02110-1301

 * To contact the authors, send email to:
 * { mmhohman OR rsutphin } AT sourceforge DOT net
 */

package com.oracle2hsqldb;

import junit.framework.TestCase;

import java.sql.Types;

import com.oracle2hsqldb.Column;
import com.oracle2hsqldb.Configuration;
import com.oracle2hsqldb.DefaultValue;
import com.oracle2hsqldb.PrimaryKey;
import com.oracle2hsqldb.SchemaWriter;
import com.oracle2hsqldb.Sequence;
import com.oracle2hsqldb.Table;
import com.oracle2hsqldb.Index;
import com.oracle2hsqldb.View;
import com.oracle2hsqldb.dialect.HSQLDialect;
import com.oracle2hsqldb.dialect.Oracle9Dialect;


/**
 * @author Moses Hohman
 */
public class SchemaWriterTest extends TestCase {
    private SchemaWriter writer;

    protected void setUp() throws Exception {
        writer = new SchemaWriter(new Configuration(true, false, false, new Oracle9Dialect()));
    }

    public void testWritePrimaryKeyColumn() {
        Table owner = new Table("T_TEST", Table.Type.TABLE);
        Column column = new Column("ID", Types.INTEGER, 0, 0, false);
        owner.addColumn(column);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(column);
        column.owner().primaryKey(pk);
        assertEquals("ID INTEGER PRIMARY KEY", writer.write(column));
    }

    public void testWriteHsqlPrimaryKeyColumnUsesIdentity() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Table owner = new Table("T_TEST", Table.Type.TABLE);
        Column column = new Column("ID", Types.INTEGER, 0, 0, false);
        owner.addColumn(column);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(column);
        column.owner().primaryKey(pk);
        assertEquals("ID INTEGER generated by default as identity (start with 1) PRIMARY KEY", writer.write(column));
    }

    public void testWriteHsqlNonNumberPrimaryKeyColumnDoesNotUseIdentity() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Table owner = new Table("T_TEST", Table.Type.TABLE);
        Column column = new Column("ID", Types.VARCHAR, 0, 0, false);
        owner.addColumn(column);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(column);
        column.owner().primaryKey(pk);
        assertEquals("ID VARCHAR PRIMARY KEY", writer.write(column));
    }

    public void testWriteHsqlNonPrimaryKeyColumnDoesNotUseIdentity() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Table owner = new Table("T_TEST", Table.Type.TABLE);
        Column column = new Column("ID", Types.INTEGER, 0, 0, true);
        owner.addColumn(column);
        assertEquals("ID INTEGER", writer.write(column));
    }

    public void testConvertsDecimalToIntegerForHsqlPrimaryKeyColumns() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Table owner = new Table("T_TEST", Table.Type.TABLE);
        Column column = new Column("ID", Types.DECIMAL, 0, 0, false);
        owner.addColumn(column);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(column);
        column.owner().primaryKey(pk);
        assertEquals("ID INTEGER generated by default as identity (start with 1) PRIMARY KEY", writer.write(column));
    }

    public void testConvertsNumericToIntegerForHsqlPrimaryKeyColumns() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Table owner = new Table("T_TEST", Table.Type.TABLE);
        Column column = new Column("ID", Types.NUMERIC, 0, 0, false);
        owner.addColumn(column);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(column);
        column.owner().primaryKey(pk);
        assertEquals("ID INTEGER generated by default as identity (start with 1) PRIMARY KEY", writer.write(column));
    }

    public void testConvertsDecimalWithSize1AndPrecision0ToBitForHsqldb() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Column column = new Column("IS_COOL", Types.DECIMAL, 1, 0, true);
        assertEquals("IS_COOL BIT", writer.write(column));
    }

    public void testConvertsTimestampWithSizeToTimestampForHsqldb() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));
        Column column = new Column("CREATED_DATE", Types.TIMESTAMP, 3, 0, true);
        assertEquals("CREATED_DATE TIMESTAMP", writer.write(column));
    }

    public void testNotNullColumn() {
        Column column = new Column("ID", Types.INTEGER, 0, 0, false);
        assertEquals("ID INTEGER NOT NULL", writer.write(column));
    }

    public void testColumnWithDefaultValue() {
        Column column = new Column("ID", Types.INTEGER, 0, 0, true, new DefaultValue("0", false));
        assertEquals("ID INTEGER DEFAULT 0", writer.write(column));

        column = new Column("bar", Types.VARCHAR, 16, 0, true, new DefaultValue("'quux'", true));
        assertEquals("bar VARCHAR2(16) DEFAULT 'quux'", writer.write(column));

        column = new Column("EST", Types.TIMESTAMP, 0, 0, true, new DefaultValue("'2001-01-13 16:59:00'", true));
        assertEquals("EST TIMESTAMP DEFAULT '2001-01-13 16:59:00'", writer.write(column));
    }

    public void testWriteColumnDefaultTrims() {
        Column col = new Column("foo", Types.TIMESTAMP, 7, 0, true, DefaultValue.NOW);
        assertEquals("foo TIMESTAMP DEFAULT SYSTIMESTAMP", writer.write(col));
    }

    public void testWriteTableWithUniqueColumn() {
        Table t = new Table("T_BLAH", Table.Type.TABLE);
        t.addColumn(new Column("ID", Types.INTEGER, 0, 0, false));
        Column uniqueColumn = new Column("NAME", Types.VARCHAR, 20, 0, true);
        t.addColumn(uniqueColumn);
        uniqueColumn.indexedBy(new Index("UK_NAME", true));
        assertEquals("CREATE TABLE T_BLAH (\n" +
                "\tID INTEGER NOT NULL,\n" +
                "\tNAME VARCHAR2(20),\n" +
                "\tCONSTRAINT UK_NAME UNIQUE (NAME)\n" +
                ")", writer.write(t));
    }

    public void testWriteTableWithUniqueColumns() {
        Table t = new Table("T_BLAH", Table.Type.TABLE);
        t.addColumn(new Column("ID", Types.INTEGER, 0, 0, false));
        Column firstName = new Column("FIRST_NAME", Types.VARCHAR, 20, 0, true);
        Column lastName = new Column("LAST_NAME", Types.VARCHAR, 20, 0, true);
        t.addColumn(firstName);
        t.addColumn(lastName);
        Index uniqueConstraint = new Index("UK_NAME", true);
        firstName.indexedBy(uniqueConstraint);
        lastName.indexedBy(uniqueConstraint);
        assertEquals("CREATE TABLE T_BLAH (\n" +
                "\tID INTEGER NOT NULL,\n" +
                "\tFIRST_NAME VARCHAR2(20),\n" +
                "\tLAST_NAME VARCHAR2(20),\n" +
                "\tCONSTRAINT UK_NAME UNIQUE (FIRST_NAME, LAST_NAME)\n" +
                ")", writer.write(t));
    }

    public void testWriteColumnSize() {
        Column column = new Column("NAME", Types.VARCHAR, 30, 0, true);
        assertEquals("NAME VARCHAR2(30)", writer.write(column));
    }

    public void testWriteSimpleTable() {
        Table table = new Table("T_BLAH", Table.Type.TABLE);
        Column pkColumn = new Column("ID", Types.INTEGER, 22, 0, false);
        table.addColumn(pkColumn);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(pkColumn);
        table.primaryKey(pk);

        table.addColumn(new Column("NAME", Types.VARCHAR, 50, 0, true));
        table.addColumn(new Column("ENTERED_DATE", Types.DATE, 0, 0, true));

        assertEquals("CREATE TABLE T_BLAH (\n" +
                "\tID INTEGER PRIMARY KEY,\n" +
                "\tNAME VARCHAR2(50),\n" +
                "\tENTERED_DATE DATE\n" +
                ")", writer.write(table));
    }

    public void testWriteViewAsView() {
        View view = new View("V_BLAH", "SELECT t.foo, b.bar FROM T_TABLE t, T_BAZ b");
        view.addColumn(new Column("t.foo", Types.INTEGER, 0, 0, true));
        view.addColumn(new Column("b.bar", Types.VARCHAR, 12, 0, true));

        writer.setViewsAsTables(false);
        assertEquals("CREATE VIEW V_BLAH AS " + view.text(), writer.write(view));
    }

    public void testWriteViewAsTable() {
        View view = new View("V_BLAH", "SELECT t.foo, b.bar FROM T_TABLE t, T_BAZ b");
        view.addColumn(new Column("t.foo", Types.INTEGER, 0, 0, true));
        view.addColumn(new Column("b.bar", Types.VARCHAR, 12, 0, true));

        writer.setViewsAsTables(true);
        assertEquals("CREATE TABLE V_BLAH (\n" +
                "\tt.foo INTEGER,\n" +
                "\tb.bar VARCHAR2(12)\n" +
                ")", writer.write(view));
    }

    public void testWriteSequenceWithStartValue() {
        Sequence seq = new Sequence("SEQ_FOO", new Long(60));
        assertEquals("CREATE SEQUENCE SEQ_FOO START WITH 60", writer.write(seq));
    }

    public void testWriteSequence() {
        Sequence seq = new Sequence("SEQ_FOO");
        assertEquals("CREATE SEQUENCE SEQ_FOO", writer.write(seq));
    }

    public void testHsqlDialectWritesIdentity() {
        writer = new SchemaWriter(new Configuration(true, false, false, new HSQLDialect()));

        Table table = new Table("T_BLAH", Table.Type.TABLE);
        Column pkColumn = new Column("ID", Types.INTEGER, 22, 0, false);
        table.addColumn(pkColumn);
        PrimaryKey pk = new PrimaryKey();
        pk.addColumn(pkColumn);
        table.primaryKey(pk);

        table.addColumn(new Column("NAME", Types.VARCHAR, 50, 0, true, new DefaultValue("'hokey'", true)));
        assertEquals("CREATE TABLE T_BLAH (\n" +
                "\tID INTEGER generated by default as identity (start with 1) PRIMARY KEY,\n" +
                "\tNAME VARCHAR(50) DEFAULT 'hokey'\n" +
                ")", writer.write(table));
    }
}